// Based on: https://review.tizen.org/gerrit/gitweb?p=profile/mobile/platform/core/uifw/efl-theme-tizen-mobile.git
// Change-Id: Ia2b0040915500522d0a5bfc39348d6b046c4d3a3

#include "macros.inl"

#define STYLE_TAGS \
    tag:  "br" "\n";\
    tag:  "ps" "ps";\
    tag:  "tab" "\t";\
    tag:  "b" "+ font_weight=Bold";

#define STYLE_TAG_MATCH \
   tag:  "match" "+ color=#3db8cc";

#define GENLIST_ITEM_1LINE_HEIGHT_INC                      120
#define GENLIST_ITEM_2LINE_HEIGHT_INC                      144
#define GENLIST_ITEM_LR_PADDING_INC                        32
#define GENLIST_ITEM_TOP_PADDING_INC                       23
#define GENLIST_ITEM_BOTTOM_PADDING_INC                    24 // including bottom line
#define GENLIST_ITEM_TYPE_BA_PADDING_INC                   32
#define GENLIST_ITEM_TYPE_DC_PADDING_INC                   32
#define GENLIST_ITEM_TYPE_AD_PADDING_INC                   32
#define GENLIST_ITEM_MAIN_LINE_HEIGHT_INC                  54
#define GENLIST_ITEM_MAIN_LINE_ICON_TEXT_PADDING_INC       12
#define GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC        32
#define GENLIST_ITEM_SUB_LINE_HEIGHT_INC                   43
#define GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC         32
#define GENLIST_ITEM_END_TEXT_WIDTH_INC                    121

//No use to Combination
#define LIST_BOTTOMLINE_HEIGHT               2

collections {
    BASE_SCALE;
    styles {
       // ************* list main text ********** //
       style { name: "list_text_main";
          base: "color=#737373FF font=Tizen:style=Regular font_size=32 text_class=tizen ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_main_dim";
          base: "color=#737373A3 font=Tizen:style=Regular font_size=32 text_class=tizen ellipsis=1.0";
          // (Changeable UI) base: "font=Tizen:style=Regular font_size="LIST_TEXT_SUB_SIZE" color=#ffffff color_class=T024D text_class=T024D ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_main_press";
          base: "color=#737373FF font=Tizen:style=Regular font_size=32 text_class=tizen ellipsis=1.0";
          // (Changeable UI) base: "font=Tizen:style=Regular font_size="LIST_TEXT_SUB_SIZE" color=#ffffff color_class=T024P text_class=T024P ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_end";
          base: "color=#737373FF font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_end_dim";
          base: "color=#737373A3 font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_end_press";
          base: "color=#737373A3 font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_sub_end";
          base: "color=#737373FF font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_sub_end_dim";
          base: "color=#737373A3 font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_sub_end_press";
          base: "color=#737373FF font=Tizen:style=Regular font_size=30 text_class=tizen ellipsis=1.0 align=right";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       // ************* list sub text ********** //
       style { name: "list_text_sub_01";
          base: "color=#070707FF font=Tizen:style=Regular font_size=40 text_class=list_item ellipsis=1.0";
          // (Changeable UI) base: "font=Tizen:style=Regular font_size="LIST_TEXT_MAIN_SIZE" color=#ffffff color_class=T023 text_class=T023 ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_sub_01_dim";
          base: "color=#0707077F font=Tizen:style=Regular font_size=40 text_class=list_item ellipsis=1.0";
          // (Changeable UI) base: "font=Tizen:style=Regular font_size="LIST_TEXT_MAIN_SIZE" color=#ffffff  color_class=T023D text_class=T023D ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
       style { name: "list_text_sub_01_press";
          base: "color=#070707FF font=Tizen:style=Regular font_size=40 text_class=list_item ellipsis=1.0";
          // (Changeable UI) base: "font=Tizen:style=Regular font_size="LIST_TEXT_MAIN_SIZE" color=#ffffff color_class=T023P text_class=T023P ellipsis=1.0";
          STYLE_TAGS
          STYLE_TAG_MATCH
       }
    }
    group { name: "elm/genlist/item/msg_thread/default";
       alias: "elm/genlist/item_compress/msg_thread/default";
       alias: "elm/genlist/tree/msg_thread/default";
       alias: "elm/genlist/tree_compress/msg_thread/default"; 
       data.item: "texts" "elm.text elm.text.end elm.text.sub elm.text.sub.end";
       data.item: "contents" "elm.swallow.icon elm.swallow.icon.0 elm.swallow.icon.1 elm.swallow.icon.2 elm.swallow.end";
       script {
          public end_icon_visible = 0;
          public sub_end_text_visible = 0;
       }
       parts {
          // base spacer for item min height
          spacer { "base"; scale;
             desc { "default";
                min: 0 GENLIST_ITEM_1LINE_HEIGHT_INC;
             }
             desc { "sub_text_visible";
                min: 0 GENLIST_ITEM_2LINE_HEIGHT_INC;
             }
          }
          // background of item
          rect { name: "bg";
             desc { state: "default";
                rel1 { to: "base"; relative: 0.0 0.0; }
                rel2 { to: "base"; relative: 1.0 1.0; }
                color: 0 0 0 0;
             }
             desc { state: "pressed"; inherit: "default";
                color: 0 0 0 10;
             }
             desc { state: "disabled"; inherit: "default";
                color: 0 0 0 0;
             }
          }
          // swallow area for banded color
          swallow { "elm.swallow.bg"; scale;
             desc { "default";
                rel1 { to: "bg"; relative: 0.0 0.0; }
                rel2 { to: "bg"; relative: 1.0 1.0; }
             }
          }
          // left outside padding
          spacer { "elm.padding.left"; scale;
             desc { "default";
                fixed: 1 0;
                min: GENLIST_ITEM_LR_PADDING_INC 0;
                align: 0.0 0.5;
                rel1 { to: "elm.swallow.bg"; relative: 0.0 0.0; }
                rel2 { to: "elm.swallow.bg"; relative: 0.0 1.0; }
             }
          }
          // right outside padding
          spacer { "elm.padding.right"; scale;
             desc { "default";
                fixed: 1 0;
                min: GENLIST_ITEM_LR_PADDING_INC 0;
                align: 1.0 0.5;
                rel1 { to: "elm.swallow.bg"; relative: 1.0 0.0; }
                rel2 { to: "elm.swallow.bg"; relative: 1.0 1.0; }
             }
          }
          // top outside padding
          spacer { "elm.padding.top"; scale;
             desc { "default";
                fixed: 0 1;
                min: 0 GENLIST_ITEM_TOP_PADDING_INC;
                max: -1 GENLIST_ITEM_TOP_PADDING_INC;
                align: 0.5 0.0;
                rel1 { to: "elm.swallow.bg"; relative: 0.0 0.0; }
                rel2 { to: "elm.swallow.bg"; relative: 1.0 0.0; }
             }
          }
          // bottom outside padding
          spacer { "elm.padding.bottom"; scale;
             desc { "default";
                fixed: 0 1;
                min: 0 GENLIST_ITEM_BOTTOM_PADDING_INC;
                max: -1 GENLIST_ITEM_BOTTOM_PADDING_INC;
                align: 0.5 1.0;
                rel1 { to: "elm.swallow.bg"; relative: 0.0 1.0; }
                rel2 { to: "elm.swallow.bg"; relative: 1.0 1.0; }
             }
          }
          // left swallow (Type B)
          swallow { "elm.swallow.icon"; scale;
             desc { state: "default";
                fixed: 1 0;
                align: 0.0 0.5;
                rel1 { to_x: "elm.padding.left"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
                rel2 { to_x: "elm.padding.left"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
             }
          }
          // padding between Type B & Type A
          spacer { "elm.padding.B.A"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 0.0 0.5;
                rel1 { to_x: "elm.swallow.icon"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
                rel2 { to_x: "elm.swallow.icon"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_TYPE_BA_PADDING_INC 0;
             }
          }
          // right swallow (Type C)
          swallow { "elm.swallow.end"; scale;
             desc { state: "default";
                fixed: 1 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.padding.right"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.padding.right"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
          }
          // padding between Type D & Type C
          spacer { "elm.padding.D.C"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.swallow.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.swallow.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_TYPE_DC_PADDING_INC 0;
             }
          }
          // right swallow 2 (Type D)
          swallow { "elm.swallow.icon.2"; scale;
             desc { state: "default";
                fixed: 1 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.padding.D.C"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.padding.D.C"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
          }
          // padding between Type A & Type D
          spacer { "elm.padding.A.D"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.swallow.icon.2"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.swallow.icon.2"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_TYPE_AD_PADDING_INC 0;
             }
          }
          // sub text line
          textblock { "elm.text.sub.end"; scale;
             desc { "default";
                fixed: 1 1;
                min: 0 GENLIST_ITEM_SUB_LINE_HEIGHT_INC;
                max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
                align: 1.0 0.0;
                rel1 { to_x: "elm.padding.A.D"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.padding.A.D"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                text.style: "list_text_sub_end";
                text.min: 1 1;
                text.max: 0 1;
                text.ellipsis: -1;
             }
             desc { "pressed"; inherit: "default";
                text.style: "list_text_sub_end_press";
             }
             desc { "disabled"; inherit: "default";
                text.style: "list_text_sub_end_dim";
             }
          }
          spacer { "elm.padding.sub.text.end"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
             }
             desc { "text_visible"; inherit: "default";
                min: GENLIST_ITEM_SUB_LINE_TEXT_END_PADDING_INC 0;
                rel1 { to_x: "elm.text.sub.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.text.sub.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
          }
          textblock { "elm.text.sub"; scale;
             desc { "default";
                fixed: 1 1;
                min: 0 GENLIST_ITEM_SUB_LINE_HEIGHT_INC;
                align: 0.5 0.0;
                rel1 { to_x: "elm.padding.B.A"; to_y: "elm.padding.top"; relative: 1.0 1.0; }
                rel2 { to_x: "elm.padding.sub.text.end"; to_y: "elm.padding.top"; relative: 0.0 1.0; }
                text.style: "list_text_sub_01";
                text.min: 0 1;
             }
             desc { "pressed"; inherit: "default";
                text.style: "list_text_sub_01_press";
             }
             desc { "disabled"; inherit: "default";
                text.style: "list_text_sub_01_dim";
             }
          }
          // bottom base of main text line
          spacer { "base_line";
             desc { "default";
                rel1 { to: "elm.padding.top"; relative: 0.0 1.0; }
                rel2 { to: "elm.padding.top"; relative: 1.0 1.0; }
             }
             desc { "sub_text_visible"; inherit: "default";
                rel1 { to_y: "elm.text.sub"; relative: 0.0 1.0; }
                rel2 { to_y: "elm.text.sub"; relative: 1.0 1.0; }
             }
          }
          // main text line
          swallow { "elm.swallow.icon.0"; scale;
             desc { "default";
                fixed: 1 0;
                align: 0.0 0.5;
                rel1 { to_x: "elm.padding.B.A"; to_y: "base_line"; relative: 1.0 1.0; }
                rel2 { to_x: "elm.padding.B.A"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
             }
          }
          swallow { "elm.swallow.icon.1"; scale;
             desc { "default";
                fixed: 1 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.padding.A.D"; to_y: "base_line"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.padding.A.D"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
          }
          spacer { "elm.padding.main.icon.text"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 0.0 0.5;
                rel1 { to: "elm.swallow.icon.0"; to_y: "base_line"; relative: 1.0 1.0; }
                rel2 { to: "elm.swallow.icon.0"; to_y: "elm.padding.bottom"; relative: 1.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_MAIN_LINE_ICON_TEXT_PADDING_INC 0;
             }
          }
          textblock { "elm.text.end"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
                max: GENLIST_ITEM_END_TEXT_WIDTH_INC -1;
                align: 1.0 0.5;
                rel1 { to_x: "elm.padding.A.D"; to_y: "base_line"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.padding.A.D"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
                text.style: "list_text_end";
                text.min: 1 1;
                text.max: 0 1;
                text.ellipsis: -1;
             }
             desc { "pressed"; inherit: "default";
                text.style: "list_text_end_press";
             }
             desc { "disabled"; inherit: "default";
                text.style: "list_text_end_dim";
             }
          }
          spacer { "elm.padding.main.text.end"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 0;
                align: 1.0 0.5;
                rel1 { to_x: "elm.swallow.icon.1"; to_y: "base_line"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.swallow.icon.1"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
             desc { "icon_visible"; inherit: "default";
                min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
             }
             desc { "text_visible"; inherit: "default";
                min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
                rel1 { to_x: "elm.text.end"; to_y: "base_line"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
             desc { "sub_text_visible"; inherit: "default";
                min: GENLIST_ITEM_MAIN_LINE_TEXT_END_PADDING_INC 0;
                rel1 { to_x: "elm.text.sub.end"; to_y: "base_line"; relative: 0.0 1.0; }
                rel2 { to_x: "elm.text.sub.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
             }
          }
          textblock { "elm.text"; scale;
             desc { "default";
                fixed: 1 0;
                min: 0 GENLIST_ITEM_MAIN_LINE_HEIGHT_INC;
                align: 0.5 0.5;
                rel1 { to_x: "elm.padding.main.icon.text"; to_y: "base_line"; relative: 1.0 1.0; }
                rel2 { to_x: "elm.padding.main.text.end"; to_y: "elm.padding.bottom"; relative: 0.0 0.0; }
                text.style: "list_text_main";
                text.min: 0 1;
             }
             desc { "pressed"; inherit: "default";
                text.style: "list_text_main_press";
             }
             desc { "disabled"; inherit: "default";
                text.style: "list_text_main_dim";
             }
          }
          rect { "elm.bottomline"; scale;
             desc { "default";
                fixed: 0 1;
                min: 0 LIST_BOTTOMLINE_HEIGHT;
                max: -1  LIST_BOTTOMLINE_HEIGHT;
                align: 0.5 0.0;
                rel1.relative: 0.0 0.0;
                rel2.relative: 1.0 0.0;
                color: 204 204 204 255;
             }
             desc { "hidden"; inherit: "default";
                visible: 0;
             }
          }
       }
       programs {
          program { name: "play_sound";
             signal: "elm,state,clicked";
             source: "elm";
             script {
                 run_program(PROGRAM:"touch_sound");
             }
          }
          program { name: "touch_sound";
              action: RUN_PLUGIN "touch_sound";
          }
          program {
             signal: "elm,state,elm.swallow.bg,visible";
             source: "elm";
             action: STATE_SET "hidden" 0.0;
             target: "elm.bottomline";
          }
          program {
             signal: "elm,state,elm.swallow.icon,visible";
             source: "elm";
             action: STATE_SET "icon_visible" 0.0;
             target: "elm.padding.B.A";
          }
          program {
             signal: "elm,state,elm.swallow.icon.2,visible";
             source: "elm";
             action: STATE_SET "icon_visible" 0.0;
             target: "elm.padding.A.D";
          }
          program {
             signal: "elm,state,elm.swallow.end,visible";
             source: "elm";
             action: STATE_SET "icon_visible" 0.0;
             target: "elm.padding.D.C";
          }
          program {
             signal: "elm,state,elm.swallow.icon.0,visible";
             source: "elm";
             action: STATE_SET "icon_visible" 0.0;
             target: "elm.padding.main.icon.text";
          }
          program {
             signal: "elm,state,elm.swallow.icon.1,visible";
             source: "elm";
             script {
                if (get_int(sub_end_text_visible) == 0) {
                   set_state(PART:"elm.padding.main.text.end", "icon_visible", 0.0);
                   set_state(PART:"elm.padding.sub.text.end", "icon_visible", 0.0);
                }
                else {
                   set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
                   set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
                }
                set_int(end_icon_visible, 1);
             }
          }
          program {
             signal: "elm,state,elm.text.sub,visible";
             source: "elm";
             action: STATE_SET "sub_text_visible" 0.0;
             target: "base";
             target: "base_line";
          }
          program {
             signal: "elm,state,elm.text.end,visible";
             source: "elm";
             script {
                if (get_int(end_icon_visible) == 1 && get_int(sub_end_text_visible) == 1) {
                   set_state(PART:"elm.padding.main.text.end", "sub_text_visible", 0.0);
                }
                else {
                   set_state(PART:"elm.padding.main.text.end", "text_visible", 0.0);
                }
             }
          }
          program {
             signal: "elm,state,elm.text.sub.end,visible";
             source: "elm";
             script {
                set_int(sub_end_text_visible, 1);
                set_state(PART:"elm.padding.sub.text.end", "text_visible", 0.0);
                set_state(PART:"elm.swallow.icon.1", "text_visible", 0.0);
             }
          }
          program { name: "default";
             signal: "elm,state,default";
             source: "elm";
             script {
                set_state(PART:"base", "default", 0.0);
                set_state(PART:"base_line", "default", 0.0);
                set_state(PART:"elm.swallow.icon.1", "default", 0.0);
                set_state(PART:"elm.padding.B.A", "default", 0.0);
                set_state(PART:"elm.padding.A.D", "default", 0.0);
                set_state(PART:"elm.padding.D.C", "default", 0.0);
                set_state(PART:"elm.padding.main.icon.text", "default", 0.0);
                set_state(PART:"elm.padding.main.text.end", "default", 0.0);
                set_state(PART:"elm.padding.sub.text.end", "default", 0.0);
                set_state(PART:"elm.bottomline", "default", 0.0);
                set_state(PART:"bg", "default", 0.0);
                set_state(PART:"elm.text", "default", 0.0);
                set_state(PART:"elm.text.end", "default", 0.0);
                set_state(PART:"elm.text.sub", "default", 0.0);
                set_state(PART:"elm.text.sub.end", "default", 0.0);
                set_int(sub_end_text_visible, 0);
             }
          }
          program { name: "pressed";
             signal: "elm,state,selected";
             source: "elm";
             action: STATE_SET "pressed" 0.0;
             target: "bg";
             target: "elm.text";
             target: "elm.text.end";
             target: "elm.text.sub";
             target: "elm.text.sub.end";
          }
          program { name: "unpressed";
             signal: "elm,state,unselected";
             source: "elm";
             action: STATE_SET "default" 0.0;
             target: "bg";
             target: "elm.text";
             target: "elm.text.end";
             target: "elm.text.sub";
             target: "elm.text.sub.end";
          }
          program { name: "enabled";
             signal: "elm,state,enabled";
             source: "elm";
             action: STATE_SET "default" 0.0;
             target: "bg";
             target: "elm.text";
             target: "elm.text.end";
             target: "elm.text.sub";
             target: "elm.text.sub.end";
          }
          program { name: "disabled";
             signal: "elm,state,disabled";
             source: "elm";
             action: STATE_SET "disabled" 0.0;
             target: "bg";
             target: "elm.text";
             target: "elm.text.end";
             target: "elm.text.sub";
             target: "elm.text.sub.end";
          }
       }
    }
}